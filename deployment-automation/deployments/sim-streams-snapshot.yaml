apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sim-streams-snapshot
  name: sim-streams-snapshot
  namespace: ${NAMESPACE}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sim-streams-snapshot
  template:
    metadata:
      labels:
        app: sim-streams-snapshot
      annotations:
        prometheus.io/port: '9090'
        prometheus.io/scrape: 'true'
    spec:
      containers:
        - args:
            - streams
            - inventory-snapshot:10:20
          env:
            - name: SIM_CASSANDRA_KEYSPACE
              valueFrom:
                configMapKeyRef:
                  key: sim.keyspace
                  name: cassandra-configurations
            - name: SIM_CASSANDRA_CONTACT_POINTS
              valueFrom:
                configMapKeyRef:
                  key: sim.contactpoints
                  name: cassandra-configurations
            - name: SIM_CASSANDRA_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: cassandra-credentials
            - name: SIM_CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: cassandra-credentials
            - name: SIM_KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                configMapKeyRef:
                  key: sim_kafka_bootstrap_servers
                  name: kafka-configurations
            - name: SIM_KAFKA_PRODUCER_ENABLE_IDEMPOTENCE
              valueFrom:
                configMapKeyRef:
                  key: sim_kafka_producer_enable_idempotence
                  name: kafka-configurations
            - name: SIM_KAFKA_TOPIC_PREFIX
              valueFrom:
                configMapKeyRef:
                  key: sim_kafka_topic_prefix
                  name: kafka-configurations
            - name: SIM_KAFKA_ADDITIONAL_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: kafka-streams-configurations
                  key: kafka_streams_additional_config
            - name: SIM_KAFKA_CONSUMER_GROUP_PREFIX
              valueFrom:
                configMapKeyRef:
                  key: sim_kafka_consumer_group_prefix
                  name: kafka-configurations
            - name: SIM_TICK_TOPIC_NAME
              valueFrom:
                configMapKeyRef:
                  key: sim_tick_topic_name
                  name: ticker-configurations
            - name: SIM_KAFKA_STREAMS_APP_PREFIX
              valueFrom:
                configMapKeyRef:
                  key: kafka_streams_app_prefix
                  name: kafka-streams-configurations
            - name: SIM_KAFKA_STREAMS_APP_VERSION
              valueFrom:
                configMapKeyRef:
                  key: kafka_streams_app_version
                  name: kafka-streams-configurations
            - name: SIM_KAFKA_STREAMS_STATE_DIR
              value: /state-store-dir
            - name: SIM_KAFKA_STREAMS_PROCESSING_GUARANTEE
              valueFrom:
                configMapKeyRef:
                  key: kafka_streams_processing_guarantee
                  name: kafka-streams-configurations
            - name: SIM_KAFKA_STREAMS_REPLICATION_FACTOR
              valueFrom:
                configMapKeyRef:
                  key: kafka_streams_replication_factor
                  name: kafka-streams-configurations
            - name: SIM_KAFKA_STREAMS_PRODUCER_ACKS
              valueFrom:
                configMapKeyRef:
                  key: kafka_streams_producer_acks
                  name: kafka-streams-configurations
            - name: SIM_TICKER_LISTEN_ADDRESS
              value: ticker-server
            - name: SIM_TICKER_LISTEN_PORT
              value: "8081"
            - name: NEW_RELIC_LICENSE_KEY
              valueFrom:
                configMapKeyRef:
                  key: newrelic_license_key
                  name: newrelic-configurations
            - name: NEW_RELIC_PREFIX
              valueFrom:
                configMapKeyRef:
                  key: newrelic_app_name_prefix
                  name: newrelic-configurations
            - name: NEW_RELIC_APP_NAME
              value: $(NEW_RELIX_PREFIX)snapshot
            - name: SIM_LOG_CHANNEL
              valueFrom:
                configMapKeyRef:
                  key: log_channel
                  name: graylog-configurations
            - name: SIM_LOG_TOPIC
              valueFrom:
                configMapKeyRef:
                  key: log_topic
                  name: graylog-configurations
            - name: SIM_KAFKA_GRAYLOG_ADDITIONAL_CONFIG
              valueFrom:
                configMapKeyRef:
                  key: graylog_additional_config
                  name: graylog-configurations
            - name: SIM_GRAYLOG_ADDR
              valueFrom:
                configMapKeyRef:
                  key: graylog_addr
                  name: graylog-configurations
            - name: SIM_LOG_LEVEL
              value: NOTICE
            - name: SIM_GRAYLOG_HOST
              value: $(NEW_RELIC_PREFIX)snapshot
          image: ${IKS_REPO_URL}/${TAG}
          imagePullPolicy: IfNotPresent
          name: sim-streams-snapshot
          resources:
            limits:
              cpu: 2000m
              memory: 10G
            requests:
              cpu: 1000m
              memory: 4G
          volumeMounts:
            - mountPath: /certs
              name: kafka-jks-volume
            - name: state-store-dir
              mountPath: /state-store-dir
      volumes:
        - name: kafka-jks-volume
          configMap:
            defaultMode: 420
            items:
              - key: truststore
                path: kafka.truststore.jks
            name: kafka-jks
        - name: state-store-dir
          persistentVolumeClaim:
            claimName: sim-inventory-snapshot-persistent-volume
          
