pipeline {

    agent any
    
    parameters {
        string(name: 'environment', defaultValue: 'non-prod', description: 'Deployment environment')
        string(name: 'CURRENT_TAG', defaultValue: 'nginx:latest', description: 'Deployment tag')
    }

    environment {
        // TAG    = 'nginx:latest'
        TAG = "${params.CURRENT_TAG}"

        dockerHubUser = 'atulchauhan01'
        dockerHubPassword = '-'
        dockerImage = 'atulchauhan01/hello-world-test'
        registry = 'atulchauhan01/hello-world-test'
    }    

    stages {
   
        stage('Read Parameters and environment variables') {
            steps {
                echo "Hello ${params.environment}"
                echo "Current TAG ${TAG}"
                script{
                    echo "setting up environment variales"
                    environment {
                        test = "test"
                    }
                }
            }
        }

        stage('Checkout Source Code') {
            steps {
                git url: 'git@github.ibm.com:Atul-Chauhan4/poc-sim-deployment-automation.git', credentialsId: 'ibm_github_credentials',  branch:'master'
            }
        }

        stage('Pull Docker Image from 1st repo') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifactory_repo',  usernameVariable: 'artifactoryUser', passwordVariable: 'artifactoryPassword')]) {
                    sh "echo ${artifactoryPassword} | docker login --username ${artifactoryUser} --password-stdin http://wce-sim-service-docker-local.artifactory.swg-devops.com"
                    sh "docker pull wce-sim-service-docker-local.artifactory.swg-devops.com/sim/webserver/master/8429:1.0"

                    // create new tag
                    sh "docker tag wce-sim-service-docker-local.artifactory.swg-devops.com/sim/webserver/master/8429:1.0 us.icr.io/inventory-mgmt-np/sim/webserver/master/8429:1.0"
                    sh "docker logout"
                }
            }
        }

        stage('Push Docker image to IKS repository (2nd repo)') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'iks_repo',  usernameVariable: 'iksRepoUser', passwordVariable: 'iksRepoPassword')]) {
                    sh "echo ${iksRepoPassword} | docker login --username ${iksRepoUser} --password-stdin us.icr.io"
                    sh "docker pull us.icr.io/inventory-mgmt-pr/sim/webserver/master/8429:1.0"
                    sh "docker logout"
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                    sh "echo ${env.dockerHubPassword} | docker login --username ${env.dockerHubUser} --password-stdin"
                    sh "docker pull atulchauhan01/hello-world-test"

                    // create new tag
                    sh "docker tag atulchauhan01/hello-world-test atulchauhan01/hello-world-test-new"
                }
            }
        }
        
        stage('Push Docker image to IKS repository') {
            steps {
                echo "push image"
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                    sh "echo ${env.dockerHubPassword} | docker login --username ${env.dockerHubUser} --password-stdin"
                    sh "docker push atulchauhan01/hello-world-test-new"
                }
            }
        }

        stage('Deployment to 1st cluster') {
            steps {
                echo "1st deployment"
                script {
                    kubernetesDeploy(configs: "deployment/deployment-var-substitution.yaml", kubeconfigId: "iks_kubeconfig")
                }
            }
        }

        stage('Deployment to 2nd cluster') {
            environment {
                TAG_NEW    = 'nginx:latest'
            }
            steps {
                 echo "2nd deployment"
                script {
                    kubernetesDeploy(configs: "deployment/deployment-var-substitution.yaml", kubeconfigId: "my_kubeconfig")
                }
            }
        }

        
    }
}