pipeline {

    agent any
    
    parameters {
        string(name: 'CURRENT_TAG', defaultValue: 'nginx:latest', description: 'Deployment tag')

        booleanParam(name: 'APPLY_DEPLOYMENTS', defaultValue: true, description: 'Do you want to make new deployment?')

        extendedChoice(
            name: "DEPLOYMENTS_TO_APPLY",
            type: "PT_CHECKBOX",
            multiSelectDelimiter: ",",
            value: "All,cleanup-backend.yaml,configsync.yaml,count-task-generator.yaml,countrequestpurge.yaml,eventpub.yaml,eventpull.yaml,moverequestpurge.yaml,pickrequestpurge.yaml,putaway-task-generator.yaml,putawaypurge.yaml,sim-iv.yaml,sim.yaml,ticker-server.yaml,ticker-consumer-not-req-use-count-task-gen-instead.yaml",
            defaultValue: "All",
            description: "Select specific deployment or All.",
            quoteValue: false,
            visibleItemCount: 5,
            descriptionPropertyValue: "All,Backend Cleanup,Config Sync,Count Task Generator,Count Request Purge,Event Pub,Event Pull,Move Request Purge,Pick Request Purge,Put Away Task Generator,Put Away Purge,SIM IV,SIM,Ticker Server,Ticker Consumer"
        )

        booleanParam(name: 'INIT', defaultValue: false, description: 'Do you want to run INIT job?')

        booleanParam(name: 'APPLY_CONFIGMAP', defaultValue: false, description: 'Do you want to apply ConfigMaps?')

        extendedChoice(
            name: "CONFIGMAPS_TO_APPLY",
            type: "PT_CHECKBOX",
            multiSelectDelimiter: ",",
            value: "All,cassandra-configurations.yaml",
            defaultValue: "",
            description: "Select specific CongfigMap or All to apply.",
            quoteValue: false,
            visibleItemCount: 5,
            descriptionPropertyValue: "All,Cassandra Config"
        )

        booleanParam(name: 'APPLY_HPAS', defaultValue: false, description: 'Do you want to apply HPAs?')

        extendedChoice(
            name: "HPAS_TO_APPLY",
            type: "PT_CHECKBOX",
            multiSelectDelimiter: ",",
            value: "All,cleanup-backend-hpa.yaml,countrequestpurge-hpa.yaml,eventpub-hpa.yaml,kong-hpa.yaml,moverequestpurge-hpa.yaml,pickrequestpurge-hpa.yaml,putawaypurge-hpa.yaml,sim-hpa.yaml,sim-iv-hpa.yaml,sim-streams-snapshot-hpa.yaml,ticker-consumer-hpa.yaml,ticker-server-hpa.yaml",
            defaultValue: "",
            description: "Select specific HPA or All to apply.",
            quoteValue: false,
            visibleItemCount: 5,
            descriptionPropertyValue: "All,Backend Cleanup,Count Request Purge,Event Pub,Kong,Move Request Purge,Pick Request Purge,Put away Purge,Sim,Sim IV,Sim Streams Snapshot,Ticker Consumer,Ticker Server"
        )

        booleanParam(name: 'RESTART_DEPLOYMENTS', defaultValue: false, description: 'Do you want to restart deployments?')

        extendedChoice(
            name: "DEPLOYMENTS_TO_RESTART",
            type: "PT_CHECKBOX",
            multiSelectDelimiter: ",",
            value: "All,cleanup-backend.yaml,configsync.yaml,count-task-generator.yaml,countrequestpurge.yaml,eventpub.yaml,eventpull.yaml,moverequestpurge.yaml,pickrequestpurge.yaml,putaway-task-generator.yaml,putawaypurge.yaml,sim-iv.yaml,sim.yaml,ticker-server.yaml,ticker-consumer-not-req-use-count-task-gen-instead.yaml",
            defaultValue: "",
            description: "Select specific deployment or All to restart.",
            quoteValue: false,
            visibleItemCount: 5,
            descriptionPropertyValue: "All,Backend Cleanup,Config Sync,Count Task Generator,Count Request Purge,Event Pub,Event Pull,Move Request Purge,Pick Request Purge,Put Away Task Generator,Put Away Purge,SIM IV,SIM,Ticker Server,Ticker Consumer"
        )        
        
    }

    environment {
        // TAG    = 'nginx:latest'
        TAG = "${params.CURRENT_TAG}"
    }    

    stages {
   
        stage('Read Parameters and environment variables and verify') {
            steps {
                echo "Hello ${params.environment}"
                echo "Current TAG ${TAG}"
                echo "${CURRENT_TAG}"
                echo "${APPLY_DEPLOYMENTS}"
                echo "${DEPLOYMENTS_TO_APPLY}"
                echo "<------>"
                script {
                    if(!(APPLY_DEPLOYMENTS || RESTART_DEPLOYMENTS)){
                        //sh "exit 1"
                        error "APPLY_DEPLOYMENTS or RESTART_DEPLOYMENTS sould be true"
                    }
                }
            }
        }

        stage('Checkout Source Code') {
            steps {
                echo "checkout souce code"
                git url: 'git@github.ibm.com:Atul-Chauhan4/poc-sim-deployment-automation.git', credentialsId: 'ibm_github_credentials',  branch:'master'
            }
        }

        stage('Pull Docker Image from 1st repo') {
            steps {
                    echo "pull docker Image"
                    withCredentials([usernamePassword(credentialsId: 'artifactory_repo',  usernameVariable: 'artifactoryUser', passwordVariable: 'artifactoryPassword')]) {
                    sh "echo ${artifactoryPassword} | docker login --username ${artifactoryUser} --password-stdin http://wce-sim-service-docker-local.artifactory.swg-devops.com"
                    sh "docker pull wce-sim-service-docker-local.artifactory.swg-devops.com/sim/webserver/master/8429:1.0"

                    // create new tag
                    sh "docker tag wce-sim-service-docker-local.artifactory.swg-devops.com/sim/webserver/master/8429:1.0 us.icr.io/inventory-mgmt-np/sim/webserver/master/8429:1.0"
                    sh "docker logout"
                }
                }
        }

        stage('Push Docker image to IKS repository (2nd repo)') {
            steps {
                echo "push docker image to IKS repository"
                withCredentials([usernamePassword(credentialsId: 'iks_repo',  usernameVariable: 'iksRepoUser', passwordVariable: 'iksRepoPassword')]) {
                    sh "echo ${iksRepoPassword} | docker login --username ${iksRepoUser} --password-stdin us.icr.io"
                    sh "docker pull us.icr.io/inventory-mgmt-pr/sim/webserver/master/8429:1.0"
                    sh "docker logout"
                }
            }
        }

        stage('Run INIT job') {
            when {
                environment name: 'INIT', value: 'true'
            }
            steps {
                echo "run init job"
                script {
                    kubernetesDeploy(configs: "deployment-automation/jobs/sim-init.yaml", kubeconfigId: "iks_kubeconfig")
                }
            }
        }

        stage('Apply ConfigMaps') {
            when {
                environment name: 'APPLY_CONFIGMAP', value: 'true'
            }
            steps {
                echo "Apply ConfigMaps"
                echo "------> ${CONFIGMAPS_TO_APPLY}"
                script {
                    if (CONFIGMAPS_TO_APPLY.contains('All')) {
                        echo "apply all ConfigMaps"
                        kubernetesDeploy(configs: "deployment-automation/configs/*", kubeconfigId: "iks_kubeconfig")
                    } else {
                        echo "apply specific ConfigMaps"

                        def configMapsArr = CONFIGMAPS_TO_APPLY.split(",")
                        for (configMap in configMapsArr) {
                            echo "configMap >> ${configMap}"
                            kubernetesDeploy(configs: "deployment-automation/configs/${configMap}", kubeconfigId: "iks_kubeconfig")
//                            kubernetesDeploy(configs: "deployment-automation/configs/cassandra-configurations.yaml", kubeconfigId: "iks_kubeconfig")
                        }
                    }

                }
            }
        }

        stage('Apply HPAs') {
            when {
                environment name: 'APPLY_HPAS', value: 'true'
            }
            steps {
                echo "Apply HPAs"
                echo "------> ${HPAS_TO_APPLY}"
                script {
                    if (HPAS_TO_APPLY.contains('All')) {
                        echo "apply all HPAs"
                        kubernetesDeploy(configs: "deployment-automation/hpas/*", kubeconfigId: "iks_kubeconfig")
                    } else {
                        echo "apply specific HPAs"
                        
                        def hpaArr = HPAS_TO_APPLY.split(",")
                        for (hpa in hpaArr) {
                            echo "hpa >> ${hpa}"
                            kubernetesDeploy(configs: "deployment-automation/hpas/${hpa}", kubeconfigId: "iks_kubeconfig")
                        }
                    }

                }
            }
        }   

        stage('Deployment to 1st cluster') {
            when {
                environment name: 'APPLY_DEPLOYMENTS', value: 'true'
            }
            steps {
                echo "Start Deployments ------> ${DEPLOYMENTS_TO_APPLY}"
                script {
                    if (DEPLOYMENTS_TO_APPLY.contains('All')) {
                        echo "apply all Deployments"
                        kubernetesDeploy(configs: "deployment-automation/deployments/*", kubeconfigId: "iks_kubeconfig")
                    } else {
                        echo "apply specific Deployment"                        
                        def deploymentArr = DEPLOYMENTS_TO_APPLY.split(",")
                        for (deployment in deploymentArr) {
                            echo "deployment >> ${deployment}"
                            kubernetesDeploy(configs: "deployment-automation/deployments/${deployment}", kubeconfigId: "iks_kubeconfig")
                        }
                    }

                }
            }
        }                

        stage('Restart deployments') {
            when {
                environment name: 'RESTART_DEPLOYMENTS', value: 'true'
            }
            steps {
                echo "Restart deployments"
                echo "------> ${DEPLOYMENTS_TO_RESTART}"
                script {
                    if (DEPLOYMENTS_TO_RESTART.contains('All')) {
                        echo "Restart all the deployments"
                        kubernetesDeploy(configs: "deployment-automation/deployments/*", kubeconfigId: "iks_kubeconfig")
                    } else {
                        echo "Restart specific deployments"
                        
                        def deploymentArr = DEPLOYMENTS_TO_RESTART.split(",")
                        for (deployment in deploymentArr) {
                            echo "deployment >> ${deployment}"
                            kubernetesDeploy(configs: "deployment-automation/deployments/${deployment}", kubeconfigId: "iks_kubeconfig")
                        }
                    }

                }
            }
        }

/*      stage('Deployment to 2nd cluster') {
            environment {
                TAG_NEW    = 'nginx:latest'
            }
            steps {
                 echo "2nd deployment"
            }
        }
 */
    }
    
}    